#!/usr/bin/perl

# Copyright © 2014 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;

use English qw(-no_match_vars);
use File::Basename ();

use IO::Socket::SSL;

my $here = File::Basename::dirname(__FILE__);
chdir("$here/..")
    or die $ERRNO;

my %hosts = (
    'online.mbank.pl' => 'ca.crt',
    'www.howsmyssl.com' => 't/howsmyssl-ca.crt',
);

my $done;
while (my ($host, $file) = each %hosts) {
    print {*STDERR} "$host ... ";
    $done = 0;
    my $callback = sub {
        my ($ok, undef, undef, undef, $cert) = @_;
        if (not $ok) {
            return $ok;
        }
        my $pem = Net::SSLeay::PEM_get_string_X509($cert);
        open(my $fh, '>', "$file.new")
            or die $ERRNO;
        print {$fh} $pem;
        close($fh)
            or die $ERRNO;
        rename("$file.new", $file)
            or die $ERRNO;
        $done = 1;
        die;
    };
    eval {  ## no critic (ReturnValueOfEval)
        IO::Socket::SSL->new(
            PeerHost => $host,
            PeerPort => 'https',
            SSL_verify_mode => SSL_VERIFY_PEER,
            SSL_verifycn_scheme => 'http',
            SSL_verify_callback => $callback,
        );
    };
    if ($done) {
        print {*STDERR} "ok\n";
    } else {
        my $message = "$EVAL_ERROR";
        $message =~ s/\n+\z//;
        print {*STDERR} "FAIL: $message\n";
    }
}

# vim:ts=4 sw=4 et
