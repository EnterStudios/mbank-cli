#!/usr/bin/perl

# Copyright (c) 2006 Piotr Lewandowski <P.P.Lewandowski@stud.elka.pw.edu.pl>,
#                    Jakub Wilk <ubanus@users.sf.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

use strict;
use warnings;
no encoding;

use Apache::ConfigFile ();
use Crypt::SSLeay ();
use Digest ();
use File::Basename qw(dirname);
use Getopt::Long qw(:config gnu_compat permute no_getopt_compat no_ignore_case);
use HTML::Form ();
use HTTP::Cookies ();
use HTTP::Request::Common qw(GET POST);
use I18N::Langinfo qw(langinfo CODESET);
use HTML::Entities ();
use LWP::UserAgent ();
use POSIX qw(mktime strftime);
use Encode ();

use constant
{
  EC_OK => 0,
  EC_USER_ERROR => 1,
  EC_HTTP_ERROR => 2,
  EC_API_ERROR => 3,
  FAKE_DOMAIN => 'mbank-cli.invalid',
  GPG => '/usr/bin/gpg'
};

chdir dirname($0) or die "Can't change working directory: $!";

my $mbank = 'https://www.mbank.com.pl';
my $cookie_jar_file = './cookie-jar.txt';
my $config_file = './mbank-cli.conf';

sub widen_string($;$)
{
  BEGIN 
  { 
    our $locale_codeset = langinfo(CODESET);
    binmode STDOUT => "encoding($locale_codeset)";
  }
  (local $_, my $codeset) = @_;
  $codeset = $main::locale_codeset unless defined $codeset;
  return Encode::decode($codeset, $_);
}

sub shrink_string($)
{
  (local $_) = @_;
  eval { $_ = Encode::encode('ISO-8859-2', $_); };
  return undef if $@;
  return $_;
}

sub decode_entities($)
{
  BEGIN
  {
    our $web_codeset = 'ISO-8859-2';
  }
  local ($_) = @_;
  $_ = widen_string $_, $main::web_codeset;
  return HTML::Entities::decode_entities $_;
}

sub lwp_init()
{
  map { $ENV{$_} = undef; } grep(/^HTTPS_/, keys %ENV);
  $ENV{'HTTPS_VERSION'} = 3;
  $ENV{'HTTPS_DEBUG'} = 0;
  my $ua = new LWP::UserAgent(
    agent => 'Mozilla/5.0',
    cookie_jar => HTTP::Cookies->new(file => $cookie_jar_file, autosave => 1, ignore_discard => 1),
    requests_redirectable => ['GET', 'POST'],
    protocols_allowed => ['https'],
    timeout => 30
  );
  return $ua;
}

my $ua = lwp_init();

my $verbose = 0;

sub write_log($)
{
  local ($_) = @_;
  open LOG, '>>', "debug/log" or return;
  print LOG "$_\n";
  close LOG;
}

sub debug($)
{
  local ($_) = @_;
  write_log $_;
  print STDERR "$_\n" if $verbose;
}

sub user_error($)
{
  local ($_) = @_;
  write_log $_;
  print STDERR "$_\n";
  exit EC_USER_ERROR;
}

sub api_error($)
{
  local ($_) = @_;
  $_ = sprintf 'Oops, API error! [%s]', $_;
  write_log $_;
  print STDERR "$_\n";
  exit EC_API_ERROR;
}

sub http_error($)
{
  my ($request) = @_;
  $_ = sprintf 'HTTP error while processing request <%s %s>', $request->method, $request->uri;
  write_log $_;
  print STDERR "$_\n";
  exit EC_HTTP_ERROR;
}

sub shorten_uri($)
{
  local ($_) = @_;
  s/&sMenu=.*?&/&/;
  s/[?]sErrDescr=&sErrSource=&/?/;
  return $_;
}

sub check_for_error($)
{
  local ($_) = @_;
  return $1 if m{<td bgcolor="#FF0000" class="big2" height="20" colspan="3">&nbsp;<img src="/gifs/yellow\.gif" width="8" height="8" alt=""><b>&nbsp;\s*([^>]*?)\s*</b></td>};
  return '';
}

sub download($)
{
  my ($request) = @_;
  debug sprintf('Download <%s %s>', $request->method, $request->uri);
  my $response = $ua->request($request);
  http_error $request unless $response->is_success;
  my $content = $response->content;
  $content =~ s/\r//g;
  my $error = check_for_error($content);
  my $filename = $request->uri;
  $filename =~ s{^\w+://.*?/}{};
  $filename =~ s/[?].*//;
  $filename =~ s/[^[:alnum:].]/_/g;
  $filename =~ s/(?:[.]\w+)?$/.html/;
  $filename = 'index.html' if $filename eq '.html';
  if (open LOG, '>', "debug/$filename")
  {
    print LOG $content;
    close LOG or die;
  }
  return { response => $response, content => $content, error => $error };
}

sub preread_config()
{
  BEGIN
  {
    our $digest_module;
    eval { $digest_module = Digest->new('SHA-256'); };
    eval { $digest_module = Digest->new('SHA-1'); } if $@;
    $digest_module = Digest->new('MD5') if $@;
  }
  user_error "Can't open the config file: $!" unless open CONFIG, '<', $config_file;
  my $prev_digest = '';
  $main::digest_module->new();
  my $header = '';
  read CONFIG, $header, 28;
  my $need_decrypt = $header eq "-----BEGIN PGP MESSAGE-----\n" || $header =~ /^\x85\x02/;
  $main::digest_module->add($header);
  $main::digest_module->addfile(*CONFIG);
  close CONFIG or die;
  my $digest = $main::digest_module->b64digest();
  $ua->cookie_jar->scan( 
    sub
    {
      my ($version, $key, $val, $path, $domain) = @_;
      $prev_digest = $val if $domain eq FAKE_DOMAIN and $path eq '/config/' and $key eq 'sha1';
      # for compatibily reasons, key is named 'sha1' rather than 'digest'
    }
  );
  if ($digest ne $prev_digest)
  {
    debug 'Your personality has just changed';
    $ua->cookie_jar->clear();
  }
  $ua->cookie_jar->set_cookie(0, 'sha1', $digest, '/config/', FAKE_DOMAIN, undef, undef, undef, 1 << 25, undef);
  return $need_decrypt;
}

sub read_config($)
{
  my ($need_decrypt) = @_;
  user_error "Can't open the config file: $!" unless open STDIN, '<', $config_file;
  my $fileno;
  if ($need_decrypt)
  {
    open GPG, '-|', GPG, '--decrypt' or die "Can't invoke gpg: $!";
    $fileno = fileno GPG;
  }
  else
  {
    $fileno = fileno STDIN;
  }
  my $ac = Apache::ConfigFile->read(
    file => "&$fileno",
    ignore_case  => 1,
    fix_booleans => 1,
    raise_error  => 1
  );
  close GPG or user_error q(Can't read the config file) if $need_decrypt;
  close STDIN or die;
  my $login = $ac->cmd_config('Login');
  user_error('No login name provided') unless defined $login;
  user_error("Invalid login name '$login'") unless $login =~ /\d+/;
  my $password = $ac->cmd_config('Password');
  user_error('No password provided') unless defined $password;
  user_error("Invalid password '$password'") unless length($password) > 0;
  return ($login, $password)
}

sub do_logout()
{
  debug 'Logging out...';
  $ua->protocols_allowed(['http', 'https']);
  my $have_cookies = 0;
  $ua->cookie_jar->scan( 
    sub 
    { 
      my ($version, $key, $val, $path, $domain) = @_;
      $have_cookies = 1 unless $domain eq FAKE_DOMAIN; 
    } 
  );
  user_error 'You are not logged in' unless $have_cookies;
  my $web_logout = download GET("$mbank/ib_logout.asp");
  $ua->cookie_jar->clear();
  debug 'Cookies has been wiped out';
  if (check_session_expiry($web_logout))
  {
    debug 'Probably you have been already logged out'
  }
  else
  {
    $web_logout->{content} =~ '<title>mBank - wylogowanie</title>' or api_error('Logout1');
  }
}

sub do_login($$)
{
  debug 'Loggin in...';
  my ($web_in, $need_decrypt) = @_;
  my @forms = HTML::Form->parse($web_in->{response});
  $#forms == 0 or api_error('Login1');
  my ($form) = @forms;
  my $in_login = $form->find_input('txtCustNr', 'text');
  my $in_passw = $form->find_input('txtPasswd', 'password');
  api_error('Login2') unless defined $in_login and defined $in_passw;
  my ($login, $passw) = read_config($need_decrypt);
  $in_login->value($login);
  $in_passw->value($passw);
  my $web_out = download $form->click();
  user_error 'System error: invalid login/password'
    if $web_out->{error} eq "B\xb3\xb1d systemu" and 
    $web_out->{content} =~ m{<center><b>B\xb3\xeadnie podano identyfikator lub has\xb3o\.</b></center>};
  user_error 'Login error: incorrect login/password' if $web_out->{error} eq "B\xb3\xb1d logowania";
  api_error(sprintf 'LoginX [%s]', $web_out->{error}) if $web_out->{error} ne '';
  return $web_out;
}

sub parse_amount($)
{
  local ($_) = @_;
  s/(\s|\xa0)//g;
  my $number_re = qr{(-?)(\d+),(\d{2})};
  m{^$number_re$} or m{>$number_re<} or return undef;
  my $amount = int($2) + int($3) / 100.0;
  $amount = -$amount if $1;
  return $amount;
}

sub do_movements($$)
{
  my ($web, $name) = @_;
  return if $web->{content} =~ m{<b>Brak operacji dla wybranych kryteri\xf3w wy\xb6wietlania[.]</b>};
  WEB_LOOP: while (1)
  {
    my $tmp_table = qr{<table CELLSPACING=0 CELLPADDING=0 BORDER=0 width="100%" BGCOLOR="#FFFFFF">};
    $web->{content} =~ m{$tmp_table.*$tmp_table(.*?)</table>}m or api_error('History1');
    $_ = $1;
    s{<img src="/gifs/blank[.]gif" [^>]*>}{}g;
    s{<td( [^>]+)?></td>}{}g;
    s{<tr( [^>]+)?>\s*</tr>}{}g;
    s{ *<tr>}{}g;
    s{ *</tr>}{\n}g;
    s{ *<td( [^>]+)?>}{}g;
    s{ *</td>}{\t}g;
    s{\s*$}{}g;
    my @movements = split /\n/;
    shift @movements;
    foreach (@movements)
    {
      if (m{<input class="button" type="button" name="Submit" VALUE=" Poprzednie operacje " onclick="onButtonClick\('prev'\)">})
      {
        my @forms = HTML::Form->parse($web->{response});
        $#forms == 0 or api_error('HistoryN');
        my ($form) = @forms;
        $form->value('UsePrevCtrlValues', 'TRUE');
        $form->value('PackageDirection', 'prev');
        $form->action("$mbank/ib_lastmovements_submit.asp");
        $web = download $form->click();
        next WEB_LOOP;
      }
      elsif (m{<input class="button" TYPE="button" NAME="Submit" value="  Nast\xeapne operacje " onclick="onButtonClick\('next'\)">})
      {
        $web = undef;
        last WEB_LOOP;
      }
      my ($date, $details, $amount, $balance, $currency) = split /\t/, $_, 5;
      $date =~ /^(\d{2})-(\d{2})-(\d{4})<br>(\d{2})-(\d{2})-(\d{4})$/ or api_error("History2 {$date}");
      $date = "$3-$2-$1";
      my $date2 = "$6-$5-$4";
      $details =~ s{\s+}{ }g;
      $details =~ s{</?a.*?>}{}g;
      $details =~ s{^<br>}{};
      $details =~ s{<br> *$}{};
      $details =~ s{<br>}{\t}g;
      $details = decode_entities $details;
      $amount = parse_amount $amount;
      defined $amount or api_error('History3');
      $balance = parse_amount $balance;
      defined $balance or api_error('History4');
      printf "$name\t", $name if defined $name;
      printf "%s\t%s\t%8.2f %s\t%8.2f %s\t%s\n", $date, $date2, $amount, $currency, $balance, $currency, $details;
    }
    last WEB_LOOP;
  }
}

sub correct_date($)
{
  local ($_) = @_;
  return undef unless defined $_;
  my $time;
  if ($_ eq 'now')
  {
    return strftime '%Y-%m-%d', localtime(time)
  }
  if (m/(\d{4})-(\d{2})-(\d{2})/)
  {
    $time = mktime 0, 0, 0, $3, $2-1, $1-1900;
    @_ = localtime $time;
    return $_ if
      $3 == $_[3] and
      $2 == $_[4] + 1 and
      $1 == $_[5] + 1900 and
      $1 >= 1900;
  }
  debug "Invalid date: $_";
  return undef;
}

sub check_session_expiry($)
{
  my ($web) = @_;
  return 1
    if ($web->{error} eq "B\xb3\xb1d systemu" and 
    $web->{content} =~ m{<center><b>Alarm bezpiecze\xf1stwa\. Nieprawid\xb3owy lub niewa\xbfny klucz sesji\.</b></center>});
}

my ($opt_from, $opt_to);
my $opt_range = undef;
my $opt_multiple_accounts = 0;
GetOptions(
  'verbose' => \$verbose,
  'config=s' => \$config_file,
  'from=s' => sub 
    {
      shift;
      $opt_from = correct_date shift;
      $opt_range = 0; 
    },
  'to=s' => sub 
    { 
      shift;
      $opt_to = correct_date shift;
      $opt_range = 0; 
    },
  'range=s{2}' => sub 
    { 
      shift;
      if (($opt_range || 0) == 0)
      {
        $opt_from = correct_date shift;
        $opt_to = undef;
        $opt_range = 1;
      }
      else
      {
        $opt_to = correct_date shift;
        $opt_range = 0;
      }
    },
  'multiple-accounts' => sub 
    { 
      $opt_multiple_accounts = 1; 
    },
  'all-accounts' => sub 
    {
      $opt_multiple_accounts = 99; 
    },
) or exit EC_USER_ERROR;

my $need_decrypt_config = preread_config();

my $action = shift @ARGV;
$action = 'list' unless defined $action;
my $selected_accounts;
my $new_account_name;

debug "Action: $action";

exit EC_OK if $action eq 'void';

if ($action eq 'logout')
{
  do_logout();
  exit EC_OK;
}
elsif ($action eq 'history' or $action eq 'future' or $action eq 'notices')
{
  $opt_multiple_accounts++ if $opt_multiple_accounts == 0 and $#ARGV > 0;
  if ($opt_multiple_accounts > 1)
  {
    $selected_accounts = qr(^);
  } 
  else
  {
    user_error 'No account selected' if $#ARGV < 0;
    @_ = map { widen_string $_ } @ARGV;
    @_ = map quotemeta, @_;
    $_ = join '|', @_;
    s/\\\*/.*/g;
    $selected_accounts = qr/^($_)$/;
  }
  if ($action eq 'history')
  {
    if (defined $opt_range)
    {
      $opt_to = correct_date 'now' if defined $opt_from and not defined $opt_to;
      user_error 'No or invalid time range selected' unless defined $opt_from and defined $opt_to and ($opt_to ge $opt_from);
      debug "Using time range $opt_from ... $opt_to";
    }
    else
    {
      debug 'Using default time range';
    }
  }
}
elsif ($action eq 'rename')
{
  user_error 'No account selected' if $#ARGV < 0;
  user_error 'No new account name provided' if $#ARGV < 1;
  $_ = widen_string shift;
  $_ = quotemeta $_;
  s/\\\*/.*/g;
  $selected_accounts = qr/^$_$/;
  $_ = widen_string shift;
  $_ = shrink_string $_;
  user_error 'Invalid new account name' if (not defined $_) or /{/;
  $new_account_name = $_;
}
elsif ($action eq 'list' or $action eq 'funds')
{ }
else
{
  user_error 'Invalid action';
}

my $need_login = 1;
my $web_homebanking;

$ua->cookie_jar->scan( 
  sub 
  {
    my ($version, $key, $val, $path, $domain) = @_;
    $need_login = 0 if $domain eq FAKE_DOMAIN and $path eq '/login-options/';
  }
);
if (!$need_login)
{
  debug 'Trying to reuse previous session';
  $web_homebanking = download POST("$mbank/ib_fr_homebanking.asp");
  if (check_session_expiry($web_homebanking))
  {
    debug 'Invalid or expired session key';
    $need_login = 1;
  }
  elsif ($web_homebanking->{error} ne '')
  {
    api_error('PreLogin: ' . $web_homebanking->{error});
  }
  else
  {
    $need_login = $web_homebanking->{content} =~ /"txtCustNr"/;
  }
}

if ($need_login)
{
  debug 'A new session will be created';
  $need_login = 1;
  my $web_login = download GET("$mbank/");
  my $web_postlogin = do_login($web_login, $need_decrypt_config);
  
  my @forms = HTML::Form->parse($web_postlogin->{response});
  $#forms == 0 or api_error('PostLogin1');
  my ($form) = @forms;
  scalar $form->inputs == 0 or api_error('PostLogin2');
  $ua->cookie_jar->set_cookie(0, 'dummy', '', '/login-options/', FAKE_DOMAIN, undef, undef, undef, 604800, undef);
  $web_homebanking = download $form->click()
}

$web_homebanking->{content} =~ m{<frame name="FunctionFrame" src="(ib_welcome[.]asp\?[^"]*?)"[^>]*?>} or api_error('PostLogin2');
my $uri = shorten_uri $1;
my $web_welcome = download GET("$mbank/$uri");

if ($action eq 'funds')
{
  $web_welcome->{content} =~ m{<a +href="(ib_navibar_3[.]asp\?[^"]*?)"[^>]*?>Fundusze inwestycyjne} or exit; 
  my $uri = shorten_uri $1;
  my $web_navibar = download GET("$mbank/$uri");
  $web_navibar->{content} =~ m{open\("(ib_if_fund_list[.]asp\?[^"]*?)", +"FunctionFrame"\)} or api_error('Funds1');
  $uri = shorten_uri $1;
  my $web_fund_list = download GET("$mbank/$uri");
  my $funds_re = qr{<a +href="ib_if_fund_details[.]asp[?][^"]*?" [^>]*?>([^<]+)</a></td>.*?<DIV NOWRAP>([^a-zA-Z]+).*?</DIV>};
  while ($web_fund_list->{content} =~ m{$funds_re}go)
  {
    my $name = decode_entities $1;
    my $amount = parse_amount $2;
    defined $amount or api_error('Funds2');
    printf "%s\t%8.2f\n", $name, $amount;
  }
  exit;
}

my $accounts_re = qr{<a +href="(ib_contractselected[.]asp[?][^"]*?)" [^>]*?>([^<]+?)<BR>((?:\d+ )+\d+)</a>(.*?)<a +href="(ib_lastmovements_submit[.]asp[?][^"]*?)" [^>]*?><DIV NOWRAP>([^<]*?)</DIV></a>.*?<DIV NOWRAP>([^<]*?)</DIV>.*?<td *class="big4"[^>]*?>([A-Z]+)</td>};
# FIXME: will the above fail if a balance / resources is negative?
$web_welcome->{content} =~ m{$accounts_re} or api_error('Welcome1');

while ($web_welcome->{content} =~ m{$accounts_re}go)
{
  my $contract_uri = $1;
  my $name = decode_entities $2;
  my $no = $3;
  my $rest = $4;
  my $lastmovements_uri = $5;
  my $balance = parse_amount $6;
  defined $balance or api_error('Welcome2');
  my $resources = parse_amount $7;
  defined $resources or api_error('Welcome3');
  my $currency = $8;
  next if defined $selected_accounts and $name !~ m/$selected_accounts/;
  my $notices_uri = undef;
  $rest =~ m{<a href="(ib_contract_notices[.]asp[?][^"]*?)" [^>]*?>} and $notices_uri = $1;
  if ($action eq 'list')
  {
    printf "%s\t%32s\t%8.2f %s\t%8.2f %s\t%s\n", $name, $no, $balance, $currency, $resources, $currency, (defined $notices_uri ? 'N' : '');
  }
  elsif ($action eq 'history')
  {
    my $web_movements = download GET("$mbank/$lastmovements_uri");
    if (defined $opt_range)
    {
      my @forms = HTML::Form->parse($web_movements->{response});
      $#forms == 0 or api_error('PreHistory1');
      my ($form) = @forms;
      $opt_from =~ m/^(\d+)-0*(\d+?)-0*(\d+?)$/ or die;
      $form->value('dayFrom', $3);
      $form->value('monthFrom', $2);
      $form->value('yearFrom', $1);
      $opt_to =~ m/^(\d+)-0*(\d+?)-0*(\d+?)$/ or die;
      $form->value('dayTo', $3);
      $form->value('monthTo', $2);
      $form->value('yearTo', $1);
      $form->value('rdDates', '1');
      $form->value('FirstEntry', '1');
      $form->value('StartNumber', '0');
      $form->value('EndNumber', '0');
      $form->value('PeriodStartN', '0');
      $form->value('PeriodEndN', '0');
      $form->value('PackageDirection', '0');
      $form->action("$mbank/ib_lastmovements_submit.asp");
      $web_movements = download $form->click();
    }
    do_movements($web_movements, $opt_multiple_accounts ? $name : undef);
  }
  elsif ($action eq 'future')
  {
    my $web_contractselected = download GET("$mbank/$contract_uri");
    $web_contractselected->{content} =~ m{open\("(ib_navibar_3[.]asp\?[^"]*?)", +"MenuFrame"\)} or api_error('Future1');
    my $navibar_uri = shorten_uri $1;
    my $web_navibar = download GET("$mbank/$navibar_uri");
    $web_navibar->{content} =~ m{href="(ib_navibar_3[.]asp\?[^"]*?)" +target="MenuFrame">Historia} or api_error('Future2');
    $navibar_uri = $1;
    $web_navibar = download GET("$mbank/$navibar_uri");
    $web_navibar->{content} =~ m{href="(ib_navibar_3[.]asp\?[^"]*?)" +target="MenuFrame">Operacje zaplanowane} or api_error('Future3');
    $navibar_uri = $1;
    $web_navibar = download GET("$mbank/$navibar_uri");
    $web_navibar->{content} =~ m{open\("(ib_future_operation_list[.]asp\?[^"]*?)", +"FunctionFrame"\)} or api_error('Future4');
    my $future_uri = shorten_uri $1;
    my $web_future_operation_list = download GET("$mbank/$future_uri");

    my $transfer_re = qr{<DIV NOWRAP>(\d{2})-(\d{2})-(\d{4})</DIV>.*? operacji">([^<]+?)</a></td> *<td[^>]+?>.*?</td> *<td[^>]+?>([^<]+?)</td>.*?<DIV NOWRAP>([^<]+?) +([A-Z]+)&nbsp;</DIV></td> *<td[^>]+?>.*?</td> *<td[^>]+?>([^<]+?)</td>};
    while ($web_future_operation_list->{content} =~ m{$transfer_re}go)
    {
      my $date = "$3-$2-$1";
      my $receiver = decode_entities $4;
      my $title = decode_entities $5;
      my $amount = parse_amount $6;
      my $currency = $7;
      my $status = decode_entities $8;
      printf "$name\t", $name if $opt_multiple_accounts;
      printf "%s\t%s\t%s\t%8.2f %s\t%s\n", $date, $receiver, $title, $amount, $currency, $status;
    }
  }
  elsif ($action eq 'notices' and defined $notices_uri)
  {
    my $web_notices = download GET("$mbank/$notices_uri");
    my $notice_re = qr{<DIV NOWRAP>(\d{2})-(\d{2})-(\d{4})</DIV>.*?<a href="(ib_contract_notice_details[.]asp[?][^"]+?&cNumSeq=(\d+)[^"]+?)"[^>]+?>([^<]+?)</a>.*?<td +class="big4" [^>]+?><b>([^<]+?)</b></td>.*?<a class="actionh" href="(ib_contract_notice_delete[.]asp[?][^"]+?)"[^>]+?>};
    while ($web_notices->{content} =~ m{$notice_re}go)
    {
      my $date = "$3-$2-$1";
      my $details_uri = $4;
      my $id = $5;
      my $type = decode_entities $6;
      my $short_desc = decode_entities $7;
      my $delete_uri = $8;
      print "$name\t" if $opt_multiple_accounts;
      print "$id\t$date\t$type\t$short_desc\n";
    }
  }
  elsif ($action eq 'rename')
  {
    my $web_contract = download GET("$mbank/$contract_uri");
		$web_contract->{content} =~ m{<INPUT class="button" TYPE="button" VALUE="Zmiana nazwy rachunku" onClick="javascript:location[.]href='(.*?)'">} or api_error 'Rename1';
    my $uri = shorten_uri $1;
    my $web_rename = download GET("$mbank/$uri");
    my @forms = HTML::Form->parse($web_rename->{response});
    $#forms == 0 or api_error('Rename2');
    my ($form) = @forms;
    $form->value('cContrName', $new_account_name);
    $web_rename = download $form->click();
    $web_rename->{content} =~ m{<b>Operacja wykonana poprawnie</b>} or api_error 'Rename3';
  }
}

# vim:ts=2 sw=2 et fenc=ascii
